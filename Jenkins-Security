pipeline {
    agent any
    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'
    }
  // Stage 1: Checkout Code
    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/Mohamed_Chouaibi']], 
                          userRemoteConfigs: [[url: 'https://github.com/Sleheddine34/Projet-DevOps.git']]])
            }
        }
 // Stage 2: Compile Code with Maven
  stage('MVN CLEAN & COMPILE') {
            steps {
                echo "Cleaning and compiling project with Maven"
                sh 'mvn clean compile'
            }
        }

 // Stage 3: Pre-commit Security Hooks
stage('Pre-commit Security Hooks') {
    steps {
        script {
            // Vérifier si pre-commit est installé, sinon l'installer
            sh '''
            if ! command -v pre-commit &> /dev/null
            then
                echo "pre-commit n'est pas installé, installation dans un environnement virtuel..."
                python3 -m venv venv
                . venv/bin/activate  # Use dot instead of source if source is not found
                pip install pre-commit
            fi
            # Désactiver les hooks Git existants pour éviter les conflits
            git config --unset-all core.hooksPath
            # Installer les hooks de pre-commit
            pre-commit install
            # Exécuter les hooks de pre-commit pour vérifier tous les fichiers
            pre-commit run --all-files
            '''
        }
    }
}
  // Stage 4: Security Scan with Nmap
     stage('Security Scan : Nmap') {
    steps {
        script {
            echo "Starting Nmap Security Scan..."
            sh 'nmap -sT -p 1-65535 -v localhost'
        }
    }
}
 // Stage 5: SQL Injection Attack (Gauntlt)
 stage('SQL Injection Attack (Gauntlt)') {
            steps {
                script {
                    // Run Gauntlt SQL Injection attack from the correct directory, display output to console and save it to a file
                    sh 'gauntlt /var/lib/jenkins/workspace/sonar/gauntlt-attacks/sql_in.attack | tee sql_injection_output.txt'
                    
                    // Archive the output file
                    archiveArtifacts artifacts: 'sql_injection_output.txt', allowEmptyArchive: true
                }
            }
        }

 // Stage 6: System Security Check - Lynis
stage('System Security Check - Lynis') {
    steps {
        script {
            // Run system security audit with Lynis
            sh 'lynis audit system | tee lynis_audit_output.txt'
            
            // Archive the output for later review
            archiveArtifacts artifacts: 'lynis_audit_output.txt', allowEmptyArchive: true
        }
    }
}
 // Stage 7: Scan with SonarQube
  stage('Scan : SonarQube') {
            steps {
                withSonarQubeEnv('sq1') {  // Make sure this is the correct SonarQube server config name
                    sh 'mvn sonar:sonar -Dsonar.login=${SONAR_TOKEN}'
                }
            }
        }
  // Stage 8: Quality and Unit Testing
         stage('JUnit/Mockito Tests') {
           steps {
                sh 'mvn test' 
            }
        }
 // Stage 9: Build Docker Image
 stage('Build Docker Image') {
            steps {  
                sh "docker build -t mohamed855/my-alpine:latest ."
            }
        }
 // Stage 10: Trivy Security Scan for Docker Image


stage('Security Scan: Trivy') {
    steps {
        retry(3) {
            echo "Scanning Docker image for vulnerabilities using Trivy..."
            sh 'trivy image --no-progress --severity CRITICAL mohamed855/my-alpine:latest'
        }
    }
}

 // Stage 11: Deploy with Docker Compose

      stage('Deploy with Docker Compose') {
            steps {
                script {
                    sh 'ls -la'
                    sh 'docker compose -f ./docker-compose.yml up -d'
                }
            }
        }



/*

stage('System Security Check - Lynis') {
    steps {
        script {
            // Run system security audit with Lynis
            sh 'lynis audit system | tee lynis_audit_output.txt'
            
            // Archive the output for later review
            archiveArtifacts artifacts: 'lynis_audit_output.txt', allowEmptyArchive: true
        }
    }
}


   stage('Scan : SonarQube') {
            steps {
                withSonarQubeEnv('sq1') {  // Make sure this is the correct SonarQube server config name
                    sh 'mvn sonar:sonar -Dsonar.login=${SONAR_TOKEN}'
                }
            }
        }
 
         stage('Deploy to Nexus') {
          steps {
                sh 'mvn deploy -DskipTests -DaltDeploymentRepository=deploymentRepo::default::http://192.168.33.10:8082/repository/maven-releases/'
            }
        } 

      stage('Build') {
            steps {
                sh 'mvn clean package'
                sh 'ls target'
            }
        }
       

         stage('Push Docker Image') {
             steps {
              script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"
                    }
                    sh 'docker push mohamed855/my-alpine:latest'
                }
            }
        }
         
          stage('Check and Start Prometheus') {
                steps {
                    script {
                        def prometheusRunning = sh(script: 'docker ps -q -f name=prometheus', returnStdout: true).trim()
                        if (prometheusRunning) {
                            echo 'Prometheus is already running.'
                        } else {
                            echo 'Starting Prometheus container...'
                            sh 'docker start prometheus'
                      }
                  }
              }
          }
          stage('Check and Start Grafana') {
                    steps {
                        script {
                            def grafanaRunning = sh(script: 'docker ps -q -f name=grafana', returnStdout: true).trim()
                            if (grafanaRunning) {
                                echo 'Grafana is already running.'
                            } else {
                                echo 'Starting Grafana container...'
                                sh 'docker start grafana'
                            }
                        }
                    }
                }
*/
        
        stage('Email Notification') {
            steps {
                script {
                    // Calculate pipeline duration
                    def duration = currentBuild.durationString
                    // Send notification
                    emailext(
                        subject: "DevOps Pipeline Report",
                        body: """
                            The pipeline has completed successfully. No action required.
                            Time Taken: ${duration}
                        """,
                        to: 'chouaibimohamed87@gmail.com, mohamed.chouaibi@esprit.tn'
                    )
                }
            }
        }
    }

post {
    failure {
        emailext (
            subject: "Jenkins Build Failed: ${currentBuild.fullDisplayName}",
            body: """
                <html>
                <body>
                    <table border="0" cellpadding="5" cellspacing="0" width="100%">
                        <tr>
                            <td bgcolor="#FF0000" align="center" style="color:white; font-size:20px; font-weight:bold;">
                                The Jenkins build has failed.
                            </td>
                        </tr>
                        <tr>
                            <td align="center" style="font-size:16px;">
                                Time Taken: ${currentBuild.durationString} and counting
                            </td>
                        </tr>
                    </table>
                </body>
                </html>
            """,
            to: "chouaibimohamed87@gmail.com, mohamed.chouaibi@esprit.tn"
        )
    }

    success {
        emailext (
            subject: "Jenkins Build Success: ${currentBuild.fullDisplayName}",
            body: """
                <html>
                <body>
                    <table border="0" cellpadding="5" cellspacing="0" width="100%">
                        <tr>
                            <td bgcolor="#00FF00" align="center" style="color:white; font-size:20px; font-weight:bold;">
                                The Jenkins build has succeeded.
                            </td>
                        </tr>
                        <tr>
                            <td align="center" style="font-size:16px;">
                                Time Taken: ${currentBuild.durationString} 
                            </td>
                        </tr>
                    </table>
                </body>
                </html>
            """,
            to: "chouaibimohamed87@gmail.com, mohamed.chouaibi@esprit.tn"
        )
    }
}

}
