pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'
    }

    stages {
        stage('Git') {
            steps {
                echo "Getting project from GIT"
                checkout([$class: 'GitSCM', branches: [[name: '*/helmi.bj']], 
                          userRemoteConfigs: [[url: 'https://github.com/Sleheddine34/Projet-DevOps.git']]])
            }
        }
        
        stage('Compile Stage') {
            steps {
                sh 'mvn clean compile'
            }
        }

        /*stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh "mvn clean verify sonar:sonar -DskipTests -Dsonar.projectKey=tp-foyer -Dsonar.host.url=http://192.168.50.5:9000 -Dsonar.login=\$SONAR_TOKEN"
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    sh '''
                        mvn deploy -DskipTests \
                        -DaltDeploymentRepository=deploymentRepo::default::http://$NEXUS_USER:$NEXUS_PASS@192.168.50.5:8081/repository/maven-releases/
                    '''
                }
            }
        }
             stage('Build Docker Image') {
        steps {
            // Specify the Dockerfile path using the `-f` option
            sh 'docker build -t medhelmibennjima/alpine:latest .'
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub (using credentials stored in Jenkins)
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"
                    }
                    
                    // Push the image to Docker Hub
                    sh 'docker push medhelmibennjima/alpine:latest'
                }
            }
        }*/
         stage('Deploy with Docker Compose') {
    steps {
        script {
            // List the contents of the current directory to confirm the presence of docker-compose.yml
            sh 'ls -la'
            // Run Docker Compose to bring up services from the file in the repository
            sh 'docker-compose -f ./docker-compose.yml up -d'
            sh 'docker-compose ps'
        }
    }
}
stage('Send Email Notification') {
             steps {
                 script {
                     // Envoi d'un email de notification
                    mail to: 'medhelmi.bennjima@esprit.tn',
                          subject: 'Jenkins Notification: Docker Image Pushed',
                         body: 'A new Docker image has been successfully pushed to DockerHub.'
                }
             }
         }
    }
}
