pipeline {
    agent any

    stages {
        //==================== Phase 1 : Pre-Commit ====================

        // Stage 1: Cloning code from GitHub
        stage('GIT') {
            steps {
                echo "Cloning project from GitHub"
                git url: 'https://github.com/Sleheddine34/Projet-DevOps.git', branch: 'joseph'
            }
        }

        // Stage 2: Pre-commit Security Hooks
        stage('Pre-commit Security Hooks') {
            steps {
                script {
                    sh '''
                    if ! command -v pre-commit &> /dev/null
                    then
                        echo "pre-commit is not installed, installing in a virtual environment..."
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install pre-commit
                    fi
                    # Disable existing Git hooks to avoid conflicts
                    git config --unset-all core.hooksPath
                    # Install pre-commit hooks
                    pre-commit install
                    # Run pre-commit checks
                    pre-commit run --all-files
                    '''
                }
            }
        }
        //==================== Phase 2 : Commit (CI) ====================


        // Stage 3: Compile Project using Maven
        stage('MVN CLEAN & COMPILE') {
            steps {
                echo "Cleaning and compiling project with Maven"
                sh 'mvn clean compile'
            }
        }

     // Stage 4 : Security Scan: Nmap
          stage('Security Scan: Nmap') {
            steps {
                echo "Starting Nmap security scan..."
                sh 'nmap -sT -p 1-65535 -v 192.168.33.10'
            }
}

 // Stage 5: Run JUnit/Mockito Tests
        stage('Test Stage') {
            steps {
                echo "Running JUnit tests..."
                sh 'mvn test'
            }
        }
// Stage 6 :Static Code Analysis - SAST (SonarQube)
 stage('MVN SONARQUBE') {
            steps {
                echo "Analyzing code quality with SonarQube"
                sh '''
                    mvn sonar:sonar \
                    -Dsonar.projectKey=tn.esprit:tp-foyer \
                    -Dsonar.host.url=http://192.168.33.10:9000 \
                    -Dsonar.login=sqa_c454a45c9a349e8975f7096ac3e5436da30ec05e
                '''
            }
        }


        // Stage 7: Security Scan: Snyk
         stage('Security Scan: Snyk') {
    steps {
        echo "Scanning project with Snyk..."
        script {
            // Directly using your Snyk API token (not recommended for production)
            sh '''
            snyk auth 3d292798-c91b-4a89-9e00-c10c209f5b02   # Use your Snyk API token directly
            snyk test --all-projects --severity-threshold=high || true 
            '''
        }
    }
}
// Stage 8 :Dependency Analysis

 stage('Dependency Analysis') {
            steps {
                echo "Performing dependency check with Maven"
                sh 'mvn dependency-check:aggregate'
            }
        }
 // Stage 9: Building Docker Image
        /* 
        stage('Building Docker Image') {
            steps {
                echo "Building Docker image..."
                sh 'docker build -t yousseeef/tp-foyer:5.0.0 .'
            }
        }
        */

        // Stage 10: Push Docker Image to DockerHub
        /* 
        stage('Push Docker Image to DockerHub') {
            steps {
                echo "Pushing Docker image to DockerHub..."
                withCredentials([string(credentialsId: 'dockerhub-jenkins-token', variable: 'dockerhub_token')]) {
                    sh "docker login -u yousseeef -p ${dockerhub_token}"
                    sh 'docker push yousseeef/tp-foyer:5.0.0'
                }
            }
        }
        */

        // Stage 11: Security Scan: Trivy (Docker Image Vulnerabilities)
        stage('Security Scan: Trivy') {
    steps {
        echo "Scanning Docker image for vulnerabilities using Trivy..."
        
        // Run the Trivy scan and redirect output to an HTML file
        sh '''
            trivy image --no-progress --severity CRITICAL yousseeef/tp-foyer:5.0.0 > trivy_scan_output.txt
            # Convert the output to HTML format (you can use a simple conversion method or a tool)
            echo "<html><body><h1>Trivy Scan Results</h1><pre>" > trivy_scan_report.html
            cat trivy_scan_output.txt >> trivy_scan_report.html
            echo "</pre></body></html>" >> trivy_scan_report.html
        '''
        
        // Archive the HTML report as an artifact in Jenkins
        archiveArtifacts artifacts: 'trivy_scan_report.html', allowEmptyArchive: true
    }
}

        //==================== Phase 3 : Acceptance ====================

   //curl
        //==================== Phase 4 : Production ====================


stage('System Security Check - Lynis') {
    steps {
        script {
            // Exécution du contrôle de sécurité avec Lynis
            sh 'lynis audit system'
        }
    }
}


       

       


       

        // Stage 9: Run Docker Compose
        /* 
        stage('Run Docker Compose') {
            steps {
                echo "Running Docker Compose..."
                sh 'docker-compose down && docker-compose up -d'
            }
        }
        */


        // Stage 10: Start Monitoring Containers
      stage('Start Monitoring Containers') {
            steps {
                echo "Starting monitoring containers..."
                sh 'docker start aab0f831dce5'
            }
        } 


   


          //==================== Phase 5 : Operations ====================



// Stage 13: Email Notification
         
        stage('Email Notification') {
            steps {
                mail bcc: '', 
                     body: '''Final Report: The pipeline has completed successfully. No action required.''', 
                     cc: '', 
                     from: '', 
                     replyTo: '', 
                     subject: 'Succès de la pipeline DevOps Project', 
                     to: 'fakhfakh4321@gmail.com, youssef.fakhfakh@esprit.tn'
            }
        }



    
    
    // Uncomment and configure post actions if required
     /* 
    post {
        success {
            emailext (
                subject: "Build Success: ${currentBuild.fullDisplayName}",
                body: "Le build a réussi ! Consultez les détails à ${env.BUILD_URL}",
                recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'DevelopersRecipientProvider']],
                to: 'fakhfakh4321@gmail.com, youssef.fakhfakh@esprit.tn'
            )
        }
        failure {
            emailext (
                subject: "Build Failure: ${currentBuild.fullDisplayName}",
                body: "Le build a échoué ! Vérifiez les détails à ${env.BUILD_URL}",
                recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'DevelopersRecipientProvider']],
                to: 'fakhfakh4321@gmail.com, youssef.fakhfakh@esprit.tn'
            )
        }
        always {
            emailext (
                subject: "Build Notification: ${currentBuild.fullDisplayName}",
                body: "Consultez les détails du build à ${env.BUILD_URL}",
                recipientProviders: [[$class: 'CulpritsRecipientProvider'], [$class: 'DevelopersRecipientProvider']],
                to: 'fakhfakh4321@gmail.com, youssef.fakhfakh@esprit.tn'
            )
        }
    }
    */




        
}
        
}
