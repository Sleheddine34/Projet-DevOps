pipeline {
    agent any

    environment {
        // Define any required environment variables
        DOCKER_IMAGE = 'yousseeef/tp-foyer:5.0.0'
        SONAR_PROJECT_KEY = 'tn.esprit:tp-foyer'
        SONAR_HOST_URL = 'http://192.168.33.10:9000'
        SONAR_TOKEN = 'sqa_c454a45c9a349e8975f7096ac3e5436da30ec05e'
    }

    stages {
        // Stage 1: Cloning the repository
        stage('Clone Repository') {
            steps {
                echo 'Cloning the project repository...'
                git url: 'https://github.com/Sleheddine34/Projet-DevOps.git', branch: 'joseph'
            }
        }

        // Stage 2: Running OWASP Dependency-Check (for vulnerability scanning in dependencies)
        stage('Dependency Vulnerability Scan') {
            steps {
                echo 'Running OWASP Dependency-Check...'
                sh '''
                    docker run --rm -v $(pwd):/src -w /src owasp/dependency-check --project ${SONAR_PROJECT_KEY} --scan /src --format ALL
                '''
            }
        }

        // Stage 3: Running SonarQube Static Code Analysis (SAST)
        stage('SonarQube Static Code Analysis') {
            steps {
                echo 'Running SonarQube analysis...'
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        mvn sonar:sonar \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                    '''
                }
            }
        }

        // Stage 4: Running Checkov for Infrastructure as Code (IaC) security scan
        stage('Infrastructure as Code Security Scan') {
            steps {
                echo 'Running Checkov for IaC security scan...'
                sh '''
                    docker run --rm -v $(pwd):/iac bridgecrew/checkov -d /iac
                '''
            }
        }

        // Stage 5: Approval before deployment (manual step)
        stage('Approval') {
            steps {
                script {
                    input message: 'All security checks passed. Do you want to proceed with the deployment?'
                }
            }
        }

        // Stage 6: Notify success
        stage('Notify Success') {
            steps {
                echo 'Sending notification about security checks results...'
                slackSend(channel: '#security-alerts', message: "Security checks passed for ${DOCKER_IMAGE}.")
            }
        }
    }

    post {
        always {
            echo 'Cleaning workspace...'
            cleanWs()
        }
        failure {
            echo 'Security checks failed. Notifying team...'
            slackSend(channel: '#security-alerts', message: "Security checks failed for ${DOCKER_IMAGE}. Check Jenkins for details.")
        }
    }
}
