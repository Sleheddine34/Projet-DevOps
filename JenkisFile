pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'
    }

    stages {
        stage('Checkout') {
            steps {
                // Increase Git buffer size to handle large repositories and retry up to 3 times
                sh 'git config --global http.postBuffer 1048576000' // Sets buffer to 1GB
                retry(3) {
                    timeout(time: 10, unit: 'MINUTES') {
                        checkout([$class: 'GitSCM', branches: [[name: '*/salih']], 
                                  userRemoteConfigs: [[url: 'https://github.com/Sleheddine34/Projet-DevOps.git']],
                                  extensions: [
                                      [$class: 'CloneOption', shallow: true, depth: 1],
                                      [$class: 'CheckoutOption', timeout: 15]
                                  ]])
                    }
                }
            }
        }

        stage('Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token2', variable: 'SONAR_TOKEN')]) {
                    sh "mvn sonar:sonar -Dsonar.projectKey=sonar -Dsonar.host.url=http://192.168.33.10:9000 -Dsonar.login=$SONAR_TOKEN"
                }
            }
        }

        stage('Package') {
            steps {
                // Compile and package the application, skipping tests as theyâ€™ve been run in the Test stage
                sh 'mvn clean package -DskipTests'
                // Verify that the .jar file exists
                sh 'ls target'
            }
        }

        stage('Deploy to Nexus') {
            steps {
                sh 'mvn deploy -DskipTests -DaltDeploymentRepository=deploymentRepo::default::http://192.168.33.10:8081/repository/maven-releases/'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build Docker image using the Docker CLI command
                sh "docker build -t 223jmt2638/alpine:latest ."
            }
        }
    }
}
