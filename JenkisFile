pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'
    }

    stages {
        stage('Checkout') {
            steps {
                // Increase Git buffer size and retry checkout if necessary
                sh 'git config --global http.postBuffer 1048576000' // 1GB buffer size
                retry(3) {
                    timeout(time: 10, unit: 'MINUTES') {
                        checkout([$class: 'GitSCM', branches: [[name: '*/salih']], 
                                  userRemoteConfigs: [[url: 'https://github.com/Sleheddine34/Projet-DevOps.git']],
                                  extensions: [
                                      [$class: 'CloneOption', shallow: true, depth: 1],
                                      [$class: 'CheckoutOption', timeout: 15]
                                  ]])
                    }
                }
            }
        }

        stage('Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Dependency Scan') {
            steps {
                echo "Running Dependency Scanning"
                sh 'mvn org.owasp:dependency-check-maven:check'
            }
        }

        

        stage('Security Scan: Nmap') {
            steps {
                echo "Starting Nmap security scan..."
                sh 'nmap -sT -p 1-65535 -v localhost'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token2', variable: 'SONAR_TOKEN')]) {
                    sh "mvn sonar:sonar -Dsonar.projectKey=sonar -Dsonar.host.url=http://192.168.33.10:9000 -Dsonar.login=$SONAR_TOKEN"
                }
            }
        }

        stage('Package') {
            steps {
                sh 'mvn clean package -DskipTests'
                sh 'ls target'  // Verify that the .jar file exists
            }
        }

        stage('Deploy to Nexus') {
            steps {
                sh 'mvn deploy -DskipTests -DaltDeploymentRepository=deploymentRepo::default::http://192.168.33.10:8081/repository/maven-releases/'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t 223jmt2638/alpine:latest ."
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"
                }
                sh 'docker push 223jmt2638/alpine:latest'
            }
        }

        stage('Send Email Notification') {
            steps {
                script {
                    mail to: 'Salah.BenThabet@esprit.tn',
                         subject: 'Jenkins Notification: Docker Image Pushed',
                         body: 'A new Docker image has been successfully pushed to DockerHub.'
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                script {
                    sh 'ls -la docker-compose.yml'
                    sh 'docker compose up -d'
                }
            }
        }

        stage('Check and Start Prometheus') {
            steps {
                script {
                    def prometheusRunning = sh(script: 'docker ps -q -f name=prometheus', returnStdout: true).trim()
                    if (prometheusRunning) {
                        echo 'Prometheus is already running.'
                    } else {
                        echo 'Starting Prometheus container...'
                        sh 'docker start prometheus'
                    }
                }
            }
        }

        stage('Check and Start Grafana') {
            steps {
                script {
                    def grafanaRunning = sh(script: 'docker ps -q -f name=grafana', returnStdout: true).trim()
                    if (grafanaRunning) {
                        echo 'Grafana is already running.'
                    } else {
                        echo 'Starting Grafana container...'
                        sh 'docker start grafana'
                    }
                }
            }
        }
        stage('Image Security Scan: Trivy') {
                    steps {
                        script {
                            sh 'trivy image --no-progress --format json -o trivy-report-tpfoyer.json 223jmt2638/alpine:latest'
                        }
                    }
                }
    }

    post {
        success {
            archiveArtifacts artifacts: 'target/dependency-check-report.html', allowEmptyArchive: false
        }
        always {
            archiveArtifacts artifacts: 'trivy-report-tpfoyer.json', allowEmptyArchive: true
        }
    }
}
