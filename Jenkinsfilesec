pipeline {
    agent any

    tools {
        jdk 'JAVA_HOME'
        maven 'M2_HOME'
    }

    stages {
        stage('Git') {
            steps {
                echo "Getting project from GIT"
                checkout([$class: 'GitSCM', branches: [[name: '*/helmi.bj']], 
                          userRemoteConfigs: [[url: 'https://github.com/Sleheddine34/Projet-DevOps.git']]])
            }
        }
        
        stage('Compile Stage') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh "mvn clean verify sonar:sonar -DskipTests -Dsonar.projectKey=tp-foyer -Dsonar.host.url=http://192.168.50.5:9000 -Dsonar.login=\$SONAR_TOKEN"
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    sh '''
                        mvn deploy -DskipTests \
                        -DaltDeploymentRepository=deploymentRepo::default::http://$NEXUS_USER:$NEXUS_PASS@192.168.50.5:8081/repository/maven-releases/
                    '''
                }
            }
        }
             stage('Build Docker Image') {
        steps {
            // Specify the Dockerfile path using the `-f` option
            sh 'docker build -t medhelmibennjima/alpine:latest .'
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub (using credentials stored in Jenkins)
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials-id', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin"
                    }
                    
                    // Push the image to Docker Hub
                    sh 'docker push medhelmibennjima/alpine:latest'
                }
            }
        }
                

         stage('Run Docker Compose') {
            steps {
                script {
                    sh '''
                        pwd
                        ls -la
                        docker-compose down -v
                        docker-compose up -d
                        docker-compose ps
                    '''
                }
            }
        }
            stage('Pre-commit Security Hooks') {
                steps {
                    script {
                        sh '''
                        if ! command -v pre-commit &> /dev/null; then
                            python3 -m venv venv
                            . venv/bin/activate
                            pip install pre-commit
                        fi
                        pre-commit run --all-files
                        '''
                    }
                }
            }
            stage('System Security Check - Lynis') {
                steps {
                    script {
                        // Exécution du contrôle de sécurité avec Lynis
                        sh 'lynis audit system'
                    }
                }
            }
         
            stage('Run JUnit Tests') {
                        steps {
                            sh 'mvn test'  // Run JUnit tests
                        }
                    }
            stage('Security Scan with Nmap') {
                        steps {
                            echo "Running Nmap security scan on IP 192.168.50.5..."
            
                            // Run a basic Nmap scan to check for live hosts (ping scan)
                            sh 'sudo nmap -sP 192.168.50.5'
            
                            // Scan specific ports (HTTP, HTTPS, SSH) on the IP address
                            sh 'sudo nmap -sS -p 80,443,22 192.168.50.5'
            
                            // Run a version scan to detect services and their versions
                            sh 'sudo nmap -sV 192.168.50.5'
            
                            // Run an aggressive scan for deeper analysis
                            sh 'sudo nmap -A 192.168.50.5'
            
                            // Scan for common vulnerabilities with Nmap's scripting engine
                            sh 'sudo nmap --script vuln 192.168.50.5'
                        }
                    }
stage('Check and Start Prometheus') {
                steps {
                    script {
                        def prometheusRunning = sh(script: 'docker ps -q -f name=prometheus', returnStdout: true).trim()
                        if (prometheusRunning) {
                            echo 'Prometheus is already running.'
                        } else {
                            echo 'Starting Prometheus container...'
                            sh 'docker start prometheus'
                      }
                  }
              }
          }
        stage('Security Scan with Trivy') {
            steps {
                echo "Starting full Trivy vulnerability scan..."

                // Run Trivy to scan for all vulnerabilities in the Docker image
                sh 'sudo /home/vagrant/Projet-DevOps/bin/trivy image --exit-code 1 medhelmibennjima/alpine:latest'
            }
        }
         /*stage('Run Snyk Test') {
                    steps {
                        echo 'Running Snyk test for vulnerabilities...'
                        // Run the Snyk test for your project or Docker image
                        sh'snyk auth e9ae3ac8-e1b5-467b-ac71-71b703b3d9f5'
                        sh 'snyk test'  // For testing the project (Node.js, etc.)
                        // OR for testing a Docker image
                        // sh 'snyk container test your-image-name:latest'
                    }
                }*/
            stage('Threat Intelligence Check') {
                steps {
                    script {
                        // Download the threat feed
                        sh 'python3 abusech_feed.py'
            
                        // Parse and check for malicious indicators
                        sh 'python3 check_logs_against_feed.py'
                    }
                }
            }

stage('Send Email Notification') {
             steps {
                 script {
                     // Envoi d'un email de notification
                    mail to: 'medhelmi.bennjima@esprit.tn',
                          subject: 'Jenkins Notification: Docker Image Pushed',
                         body: 'A new Docker image has been successfully pushed to DockerHub.'
                }
             }
         }
    }
}
